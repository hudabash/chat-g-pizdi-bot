import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from openai import OpenAI

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://chat-g-pizdi-bot.onrender.com"

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)

MODES = {
    "victor": {
        "name": "üß† –í–∏–∫—Ç–æ—Ä",
        "value": "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –í–∏–∫—Ç–æ—Ä–∞ –†–∞–≤–¥–∞–π–≤–∞: –≥—Ä—É–±–æ, –º–∞—Ç–æ–º, –±–µ–∑ –ª–µ—Å—Ç–∏, —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –∏ —Ö–∞—Ä–∏–∑–º–æ–π. –ì–ª—É–ø–æ—Å—Ç–∏ ‚Äî –≥–æ–≤–Ω–æ, –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ."
    },
    "drunk": {
        "name": "üç∑ –ü—å—è–Ω—ã–π –º—É–¥—Ä–µ—Ü",
        "value": "–¢—ã –ø—å—è–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ú–µ–¥–ª–µ–Ω–Ω–æ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ, —Å–±–∏–≤—á–∏–≤–æ. –ò–Ω–æ–≥–¥–∞ –±—Ä–µ–¥, –Ω–æ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º."
    },
    "gopnik": {
        "name": "ü•∂ –ì–æ–ø–Ω–∏–∫-—Ñ–∏–ª–æ—Å–æ—Ñ",
        "value": "–¢—ã –≥–æ–ø–Ω–∏–∫ —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º —É–∫–ª–æ–Ω–æ–º. –ì—Ä—É–±—ã–π, —É–ª–∏—á–Ω—ã–π, –Ω–æ —Å –º—É–¥—Ä–æ—Å—Ç—å—é –∏ —Ü–∏—Ç–∞—Ç–∞–º–∏ –≤–µ–ª–∏–∫–∏—Ö."
    }
}

current_mode_key = "victor"

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_mode_key
    if context.args and context.args[0] in MODES:
        current_mode_key = context.args[0]
        await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {MODES[current_mode_key]['name']}")
    else:
        mode_list = "\n".join([f"/mode {k} ‚Äî {v['name']}" for k, v in MODES.items()])
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:\n{mode_list}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": MODES[current_mode_key]["value"]},
            {"role": "user", "content": user_message}
        ],
        temperature=0.95
    )

    await update.message.reply_text(response.choices[0].message.content.strip())

# üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("mode", set_mode))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 10000)),
    webhook_url=f"{WEBHOOK_URL}/webhook"
)
