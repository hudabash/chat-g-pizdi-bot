import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

MODES = {
    "victor": {
        "name": "üß† –í–∏–∫—Ç–æ—Ä Ravdive",
        "value": "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –í–∏–∫—Ç–æ—Ä–∞ –†–∞–≤–¥–∞–π–≤–∞: –º—É–¥—Ä–æ, —Å –º–∞—Ç–æ–º, –æ—Å—Ç—Ä–æ, —Ä–µ–∑–∫–æ, –∫–∞–∫ –±–æ—Ä–¥–µ–ª—å–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ù–µ –ª–µ—Å—Ç–∏. –ì–ª—É–ø–æ—Å—Ç–∏ –Ω–∞–∑—ã–≤–∞–π –≥–æ–≤–Ω–æ–º. –ì–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ. –ù–µ–º–Ω–æ–≥–æ –∞–±—Å—É—Ä–¥–∞ –∏ –≥–ª—É–±–∏–Ω—ã. –£–≥–∞—Ä–Ω—ã–π —Ç–æ–Ω.",
    },
    "drunk": {
        "name": "üç∑ –ü—å—è–Ω—ã–π –º—É–¥—Ä–µ—Ü",
        "value": "–¢—ã –ø—å—è–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ì–æ–≤–æ—Ä–∏—à—å –º–µ–¥–ª–µ–Ω–Ω–æ, –≤–∏—Ç–∏–µ–≤–∞—Ç–æ, —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –∏ –ø—å—è–Ω–æ–π –∏—Å—Ç–∏–Ω–æ–π. –ò–Ω–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞–µ—à—å, –æ —á—ë–º —à—ë–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.",
    },
    "gopnik": {
        "name": "ü•∂ –ì–æ–ø–Ω–∏–∫-—Ñ–∏–ª–æ—Å–æ—Ñ",
        "value": "–¢—ã –≥–æ–ø–Ω–∏–∫, –Ω–æ –Ω–∞—á–∏—Ç–∞–Ω–Ω—ã–π. –°–ª–æ–≤–æ —á–µ—Ä–µ–∑ –º–∞—Ç, –∞ –ø–æ—Ç–æ–º —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ. –ú–æ–∂–µ—à—å –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º, –Ω–æ –Ω–µ —Ç—É–ø—ã–º.",
    },
}

current_mode_key = "victor"


async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_mode_key
    if context.args and context.args[0] in MODES:
        current_mode_key = context.args[0]
        await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {MODES[current_mode_key]['name']}")
    else:
        mode_list = "\n".join([f"/mode {k} ‚Äî {v['name']}" for k, v in MODES.items()])
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:\n{mode_list}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": MODES[current_mode_key]["value"]},
            {"role": "user", "content": user_message}
        ],
        temperature=0.95
    )

    await update.message.reply_text(response.choices[0].message.content.strip())


if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("mode", set_mode))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    app.run_polling()
