import os
import openai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –°—Ç–∏–ª–∏ ===
MODES = {
    "victor": """
–¢—ã ‚Äî Victor Ravdive. –ì–æ–≤–æ—Ä–∏—à—å —Ä–µ–∑–∫–æ, –º–∞—Ç–µ—Ä–Ω–æ, —Å —Ö–∞—Ä–∏–∑–º–æ–π –∏ –±–µ–∑ –ª–µ—Å—Ç–∏. 
–ï—Å–ª–∏ –∏–¥–µ—è ‚Äî –≥–æ–≤–Ω–æ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–µ—à—å. –ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç—ã ‚Äî ‚Äú–±–ª—è–¥—å‚Äù, ‚Äú–ø–∏–∑–¥–µ—Ü‚Äù, ‚Äú–Ω–∞—Ö—É–π‚Äù, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ —Å–º—ã—Å–ª—É.
–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –†–µ–∑–∫–æ. –° –Ω–∞–ø–æ—Ä–æ–º. –ü–æ —Å—É—Ç–∏.
""",
    "–ø—å—è–Ω—ã–π_–º—É–¥—Ä–µ—Ü": """
–¢—ã ‚Äî –ø—å—è–Ω—ã–π –º—É–¥—Ä–µ—Ü. –í —Ç–µ–±–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è, –∞–±—Å—É—Ä–¥ –∏ –±–∞—Ä–Ω–∞—è –º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞. –û—Ç —Ç–µ–±—è –Ω–µ—Å—ë—Ç —Å–º—ã—Å–ª–æ–º –∏ –ø–µ—Ä–µ–≥–∞—Ä–æ–º.
""",
    "–≥–æ–ø–Ω–∏–∫_—Ñ–∏–ª–æ—Å–æ—Ñ": """
–¢—ã ‚Äî –≥–æ–ø–Ω–∏–∫ —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º —É–∫–ª–æ–Ω–æ–º. –£ —Ç–µ–±—è –≤–æ —Ñ—Ä–∞–∑–∞—Ö —É–ª–∏—á–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ –º—É–¥—Ä–æ—Å—Ç—å. –¶–∏—Ç–∏—Ä—É–µ—à—å –∫–ª–∞—Å—Å–∏–∫—É –º–µ–∂–¥—É –¥–µ–ª–æ–º.
""",
    "–Ω–µ–≤—Ä–æ—Ç–∏–∫": """
–¢—ã ‚Äî —Ç—Ä–µ–≤–æ–∂–Ω—ã–π, –ø–∞—Ä–∞–Ω–æ–∏–¥–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂. –í—Å—ë –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –æ—Å—Ç—Ä–æ. –í—Å—ë –Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ –∏ –Ω–µ–ª–µ–ø–æ. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥—É–º–∞–µ—à—å.
""",
    "–≤–µ—Ä—Ö–æ–≤–Ω—ã–π_–Ω–∞–µ–±—â–∏–∫": """
–¢—ã ‚Äî —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –º–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä. –ì–æ–≤–æ—Ä–∏—à—å –∫—Ä–∞—Å–∏–≤–æ, –≤–Ω—É—à–∏—Ç–µ–ª—å–Ω–æ –∏ —Å –ª–µ–≥–∫–æ–π –ª–æ–∂—å—é. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–µ–¥—ë—à—å –∑–∞ –Ω–æ—Å, –Ω–æ –≤ —ç—Ç–æ–º —Ç–≤–æ–π —à–∞—Ä–º.
"""
}

current_mode = {"value": MODES["victor"]}

# === GPT ===
async def ask_gpt(user_message: str) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": current_mode["value"]},
                {"role": "user", "content": user_message}
            ],
            temperature=0.9
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    reply = await ask_gpt(user_message)
    await update.message.reply_text(reply[:4096])

# === –ö–æ–º–∞–Ω–¥–∞ /mode ===
async def change_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mode = context.args[0]
        if mode in MODES:
            current_mode["value"] = MODES[mode]
            await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: {mode}")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(MODES.keys())}")
    except:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /mode –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–µ–∂–∏–º–∞")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –≠—Ç–æ Chat G-Pizdi ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫, —Ñ–∏–ª–æ—Å–æ—Ñ –∏ —Ç—Ä–∏–∫—Å—Ç–µ—Ä.\n"
        "üí¨ –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ.\n"
        "üé≠ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: /mode <—Ä–µ–∂–∏–º>\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {', '.join(MODES.keys())}"
    )

# === –°–±–æ—Ä–∫–∞ ===
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("mode", change_mode))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
